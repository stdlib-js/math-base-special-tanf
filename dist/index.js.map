{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/s_tanf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar kernelTanf = require( '@stdlib/math-base-special-kernel-tanf' );\nvar rempio2f = require( '@stdlib/math-base-special-rempio2f' );\nvar toWordf = require( '@stdlib/number-float32-base-to-word' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar FLOAT32_ABS_MASK = require( '@stdlib/constants-float32-abs-mask' );\nvar FLOAT32_EXPONENT_MASK = require( '@stdlib/constants-float32-exponent-mask' );\nvar FLOAT64_HALF_PI = require( '@stdlib/constants-float64-half-pi' );\n\n\n// VARIABLES //\n\n// PI/4 = 0.7853981256484985 => 0 01111110 10010010000111111011010 => 0x3f490fda = 1061752768\nvar PIO4_WORD = 0x3f490fda|0; // asm type annotation\n\n// 3*PI/4 = 2.356194257736206 => 0 10000000 00101101100101111100011 => 0x4016cbe3 = 1075235811\nvar THREE_PIO4_WORD = 0x4016cbe3|0; // asm type annotation\n\n// 5*PI/4 = 3.9269907474517822 => 0 10000000 11110110101001111010001 => 0x407b53d1 = 1081824209\nvar FIVE_PIO4_WORD = 0x407b53d1|0; // asm type annotation\n\n// 7*PI/4 = 5.497786998748779 => 0 10000001 01011111110110111011111 => 0x40afeddf = 1085271519\nvar SEVEN_PIO4_WORD = 0x40afeddf|0; // asm type annotation\n\n// 9*PI/4 = 7.068583011627197 => 0 10000001 11000100011000111010101 => 0x40e231d5 = 1088565717\nvar NINE_PIO4_WORD = 0x40e231d5|0; // asm type annotation\n\n// 2^-12 = 0.000244140625 => 0 01110011 00000000000000000000000 => 0x39800000 = 964689920\nvar SMALL_WORD = 0x39800000|0; // asm type annotation\n\n// Small multiples of PI/2 in double-precision floating-point format:\nvar PIO2 = FLOAT64_HALF_PI;             // 0x3FF921FB, 0x54442D18\nvar PI = 2.0 * FLOAT64_HALF_PI;         // 0x400921FB, 0x54442D18\nvar THREE_PIO2 = 3.0 * FLOAT64_HALF_PI; // 0x4012D97C, 0x7F3321D2\nvar TWO_PI = 4.0 * FLOAT64_HALF_PI;     // 0x401921FB, 0x54442D18\n\n// Array for storing the remainder element:\nvar Y = [ 0.0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the tangent of a single-precision floating-point number (in radians).\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |    S   |    C   |   T    |\n*     | 1 |    C   |   -S   |  -1/T  |\n*     | 2 |   -S   |   -C   |   T    |\n*     | 3 |   -C   |    S   |  -1/T  |\n*\n* @param {number} x - input value (in radians)\n* @returns {number} tangent\n*\n* @example\n* var v = tanf( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = tanf( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* @example\n* var v = tanf( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* @example\n* var v = tanf( NaN );\n* // returns NaN\n*/\nfunction tanf( x ) {\n\tvar hx;\n\tvar ix;\n\tvar n;\n\n\thx = toWordf( f32( x ) )|0; // asm type annotation\n\tix = (hx & FLOAT32_ABS_MASK)|0; // asm type annotation\n\n\t// Case: |x| ~<= \u03C0/4\n\tif ( ix <= PIO4_WORD ) {\n\t\t// Case: |x| < 2^-12\n\t\tif ( ix < SMALL_WORD ) {\n\t\t\treturn f32( x );\n\t\t}\n\t\treturn f32( kernelTanf( x, 1 ) );\n\t}\n\t// Case: |x| ~<= 5\u03C0/4\n\tif ( ix <= FIVE_PIO4_WORD ) {\n\t\t// Case: |x| ~<= 3\u03C0/4\n\t\tif ( ix <= THREE_PIO4_WORD ) {\n\t\t\tif ( hx > 0 ) {\n\t\t\t\treturn f32( kernelTanf( x - PIO2, -1 ) );\n\t\t\t}\n\t\t\treturn f32( kernelTanf( x + PIO2, -1 ) );\n\t\t}\n\t\tif ( hx > 0 ) {\n\t\t\treturn f32( kernelTanf( x - PI, 1 ) );\n\t\t}\n\t\treturn f32( kernelTanf( x + PI, 1 ) );\n\t}\n\t// Case: |x| ~<= 9\u03C0/4\n\tif ( ix <= NINE_PIO4_WORD ) {\n\t\t// Case: |x| ~<= 7\u03C0/4\n\t\tif ( ix <= SEVEN_PIO4_WORD ) {\n\t\t\tif ( hx > 0 ) {\n\t\t\t\treturn f32( kernelTanf( x - THREE_PIO2, -1 ) );\n\t\t\t}\n\t\t\treturn f32( kernelTanf( x + THREE_PIO2, -1 ) );\n\t\t}\n\t\tif ( hx > 0 ) {\n\t\t\treturn f32( kernelTanf( x - TWO_PI, 1 ) );\n\t\t}\n\t\treturn f32( kernelTanf( x + TWO_PI, 1 ) );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= FLOAT32_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction...\n\tn = rempio2f( f32( x ), Y );\n\treturn f32( kernelTanf( Y[ 0 ], 1 - ( ( n & 1 ) << 1 ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = tanf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the tangent of a single-precision floating-point number (in radians).\n*\n* @module @stdlib/math-base-special-tanf\n*\n* @example\n* var tanf = require( '@stdlib/math-base-special-tanf' );\n*\n* var v = tanf( 0.0 );\n* // returns ~0.0\n*\n* v = tanf( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* v = tanf( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* v = tanf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,IAAIC,EAAa,QAAS,uCAAwC,EAC9DC,EAAW,QAAS,oCAAqC,EACzDC,EAAU,QAAS,qCAAsC,EACzDC,EAAM,QAAS,wCAAyC,EACxDC,EAAmB,QAAS,oCAAqC,EACjEC,EAAwB,QAAS,yCAA0C,EAC3EC,EAAkB,QAAS,mCAAoC,EAM/DC,EAAY,WAGZC,EAAkB,WAGlBC,EAAiB,WAGjBC,EAAkB,WAGlBC,EAAiB,WAGjBC,EAAa,UAGbC,EAAOP,EACPQ,EAAK,EAAMR,EACXS,EAAa,EAAMT,EACnBU,EAAS,EAAMV,EAGfW,EAAI,CAAE,CAAI,EA0Cd,SAASC,EAAMC,EAAI,CAClB,IAAIC,EACAC,EACAC,EAMJ,OAJAF,EAAKlB,EAASC,EAAKgB,CAAE,CAAE,EAAE,EACzBE,EAAMD,EAAKhB,EAAkB,EAGxBiB,GAAMd,EAELc,EAAKT,EACFT,EAAKgB,CAAE,EAERhB,EAAKH,EAAYmB,EAAG,CAAE,CAAE,EAG3BE,GAAMZ,EAELY,GAAMb,EACLY,EAAK,EACFjB,EAAKH,EAAYmB,EAAIN,EAAM,EAAG,CAAE,EAEjCV,EAAKH,EAAYmB,EAAIN,EAAM,EAAG,CAAE,EAEnCO,EAAK,EACFjB,EAAKH,EAAYmB,EAAIL,EAAI,CAAE,CAAE,EAE9BX,EAAKH,EAAYmB,EAAIL,EAAI,CAAE,CAAE,EAGhCO,GAAMV,EAELU,GAAMX,EACLU,EAAK,EACFjB,EAAKH,EAAYmB,EAAIJ,EAAY,EAAG,CAAE,EAEvCZ,EAAKH,EAAYmB,EAAIJ,EAAY,EAAG,CAAE,EAEzCK,EAAK,EACFjB,EAAKH,EAAYmB,EAAIH,EAAQ,CAAE,CAAE,EAElCb,EAAKH,EAAYmB,EAAIH,EAAQ,CAAE,CAAE,EAGpCK,GAAMhB,EACH,KAGRiB,EAAIrB,EAAUE,EAAKgB,CAAE,EAAGF,CAAE,EACnBd,EAAKH,EAAYiB,EAAG,CAAE,EAAG,IAAQK,EAAI,IAAO,EAAI,CAAE,EAC1D,CAKAvB,EAAO,QAAUmB,IC/HjB,IAAIK,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "kernelTanf", "rempio2f", "toWordf", "f32", "FLOAT32_ABS_MASK", "FLOAT32_EXPONENT_MASK", "FLOAT64_HALF_PI", "PIO4_WORD", "THREE_PIO4_WORD", "FIVE_PIO4_WORD", "SEVEN_PIO4_WORD", "NINE_PIO4_WORD", "SMALL_WORD", "PIO2", "PI", "THREE_PIO2", "TWO_PI", "Y", "tanf", "x", "hx", "ix", "n", "main"]
}
